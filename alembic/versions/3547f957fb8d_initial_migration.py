"""Initial migration

Revision ID: 3547f957fb8d
Revises: 
Create Date: 2025-09-03 18:46:22.351812

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3547f957fb8d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('prediction_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('zone', sa.String(), nullable=False),
    sa.Column('predicted_count', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_prediction_records_id'), 'prediction_records', ['id'], unique=False)
    op.create_table('traffic_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('zone', sa.String(), nullable=False),
    sa.Column('traffic_count', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_traffic_records_id'), 'traffic_records', ['id'], unique=False)
    op.drop_table('_prisma_migrations')
    op.drop_table('automation_rules')
    op.drop_index(op.f('idx_sensor_timestamp'), table_name='sensor_readings')
    op.drop_index(op.f('sensor_readings_timestamp_idx'), table_name='sensor_readings')
    op.drop_table('sensor_readings')
    op.drop_index(op.f('idx_zone_timestamp'), table_name='latest_state')
    op.drop_table('latest_state')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('latest_state',
    sa.Column('zone', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('traffic', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pollution', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True, precision=6), autoincrement=False, nullable=True),
    sa.Column('predicted_traffic', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reroute_suggested', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True, precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('zone', name=op.f('latest_state_pkey'))
    )
    op.create_index(op.f('idx_zone_timestamp'), 'latest_state', ['zone', sa.literal_column('timestamp DESC')], unique=False)
    op.create_table('sensor_readings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('traffic', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('pollution', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True, precision=6), autoincrement=False, nullable=False),
    sa.Column('source', sa.TEXT(), server_default=sa.text("'simulated'::text"), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', 'timestamp', name=op.f('sensor_readings_pkey'))
    )
    op.create_index(op.f('sensor_readings_timestamp_idx'), 'sensor_readings', [sa.literal_column('timestamp DESC')], unique=False)
    op.create_index(op.f('idx_sensor_timestamp'), 'sensor_readings', [sa.literal_column('timestamp DESC')], unique=False)
    op.create_table('automation_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('zone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('traffic_threshold', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True, precision=6), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('automation_rules_pkey'))
    )
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    op.drop_index(op.f('ix_traffic_records_id'), table_name='traffic_records')
    op.drop_table('traffic_records')
    op.drop_index(op.f('ix_prediction_records_id'), table_name='prediction_records')
    op.drop_table('prediction_records')
    # ### end Alembic commands ###
